setwd("~/Computing/FurtherLD/Code")
MinMafDF<-data.frame(NumReads=c(50, 20, 20, 10, 10, 5, 5, 2, 2),
DataType=c("Expected", "Called", "Expected",
"Called", "Expected",
"Called", "Expected",
"Called", "Expected"),
SB=c(5.22055,6.44848e6,5.14832e6,1.29571e8,1.04597e8,5.66787e8,4.88341e8,1.36945e9,1.25846e9),
RMSD=c(0,0.002828,0.002449,0.013000,0.011489,0.028687,0.026153,0.048311,0.045793))
MinMafDF$NumReads<-as.factor(MinMafDF$NumReads)
MinMafDF$SB<-MinMafDF$SB/28879650
PlotRMSD<-function(ResultFrame, GraphName){
PlotRMSD<-ggplot(data=ResultFrame, aes(x=NumReads, y=RMSD, fill=DataType)) +
geom_bar(stat="identity", position = position_dodge()) +
scale_x_discrete(limits = ResultFrame$DataNames) +
scale_fill_brewer(palette = "Set1") +
labs(title=GraphName,
x="Read Depth", y="Root Mean Square Deviation", fill="Genotype Format")
}
PlotSB<-function(ResultFrame, GraphName){
ggplot(data=ResultFrame, aes(x=NumReads, y=SB, fill=DataType)) +
geom_bar(stat="identity", position = position_dodge()) +
scale_x_discrete(limits = ResultFrame$DataNames) +
scale_fill_brewer(palette = "Set1") +
labs(title=GraphName,
x="Read Depth", y="Standard Bias", fill="Genotype Format")
}
ParamsFile<-read.csv("../Results/Constant/Constant.csv")
NumPlots<-length(ParamsFile$Data_Set)/3
Data_Type<-toString(ParamsFile[1,2])
PlotTitle<-paste("LD decay curve for", "different read depths", sep = " ")
Add_Curve<-function(CurvePos1,StartPlot){
#Function to add a curve from a data set to an existing plot
#Create new data fram to store coefficients
CurveDF<-data.frame("CurveName"=toString(ParamsFile[CurvePos1,1]),"CurveType"=toString(ParamsFile[CurvePos1,5]))
init<-ParamsFile[CurvePos1+1,4]
lam<-ParamsFile[CurvePos1+2,4]
#Create curve object
ExpCurve<-stat_function(fun=function(x) init * exp(lam * x), geom="line",
aes_(colour = toString(CurveDF$CurveName[1]),linetype = toString(CurveDF$CurveType[1])),
size=.5)
NewPlot<- StartPlot + ExpCurve
return(NewPlot)
}
RMSD_MinMaf<-PlotRMSD(MinMafDF, " ") + theme(plot.title = element_text(hjust = 0.5),
legend.justification = c(1, 1), legend.position = c(1, 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
require(ggplot2)
require(gridExtra)
require(grid)
require(RColorBrewer)
Add_Curve<-function(CurvePos1,StartPlot){
#Function to add a curve from a data set to an existing plot
#Create new data fram to store coefficients
CurveDF<-data.frame("CurveName"=toString(ParamsFile[CurvePos1,1]),"CurveType"=toString(ParamsFile[CurvePos1,5]))
init<-ParamsFile[CurvePos1+1,4]
lam<-ParamsFile[CurvePos1+2,4]
#Create curve object
ExpCurve<-stat_function(fun=function(x) init * exp(lam * x), geom="line",
aes_(colour = toString(CurveDF$CurveName[1]),linetype = toString(CurveDF$CurveType[1])),
size=.5)
NewPlot<- StartPlot + ExpCurve
return(NewPlot)
}
RMSD_MinMaf<-PlotRMSD(MinMafDF, " ") + theme(plot.title = element_text(hjust = 0.5),
legend.justification = c(1, 1), legend.position = c(1, 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
SB_MinMaf<-PlotSB(MinMafDF, " ") + theme(plot.title = element_text(hjust = 0.5),
legend.justification = c(1, 1), legend.position = c(1, 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
BlankDF <- data.frame()
FitPlot<-ggplot(BlankDF) + geom_blank() + xlim(0, 1000000) + ylim(0,0.06)
for (i in 1:NumPlots){
DataPos<-(i*3)-2
FitPlot<-Add_Curve(DataPos,FitPlot)
}
FitPlot<-FitPlot + theme(legend.justification = c(1, 1), legend.position = c(1, 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
labs(x="Distance (in bases)",y=expression(r^2),colour="Read Depth",linetype="Genotype Format") +
scale_color_discrete(breaks=c("2","5","10","20","50"))
FitPlot
FitPlot<-ggplot(BlankDF) + geom_blank() + xlim(0, 1000000) + ylim(0,0.06)
for (i in 1:NumPlots){
DataPos<-(i*3)-2
FitPlot<-Add_Curve(DataPos,FitPlot)
}
FitPlot<-FitPlot + theme(legend.justification = c(1, 1), legend.position = c(1, 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
labs(x="Distance (in bases)",y=expression(r^2),colour="Read Depth",linetype="Genotype Format") +
scale_color_discrete(breaks=c("2","5","10","20","50")) + scale_linetype_discrete(breaks=c("Called","Posterior Probability"))
FitPlot
source('~/Computing/FurtherLD/Code/Thesis_Figure_Constant.R')
source('~/Computing/FurtherLD/Code/Thesis_Figure_Constant_GLS.R')
source('~/Computing/FurtherLD/Code/Thesis_Figure_Constant_GLS.R')
DF1000<-read.csv("../Results/Guppy/Guppy1000.csv")
FitPlot<-ggplot(DF1000) + geom_blank() + xlim(0, 1000000) + ylim(0,0.75)
ARPlot<-FitPlot + stat_function(fun=function(x) DF1000[2,4] * exp(DF1000[3,4] * x), geom="line", colour="blue", aes(linetype = "High"),size=.5) +
stat_function(fun=function(x) DF1000[5,4] * exp(DF1000[6,4] * x), geom="line", colour="blue", aes(linetype = "Low"),size=.5) +
theme(legend.justification = c(1, 1), legend.position = c(1, 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
labs(x="Distance (in bases)",y=expression(r^2),linetype="Predation Level")  + theme(legend.text=element_text(size=2))
ARPlot
ARPlot<-FitPlot + stat_function(fun=function(x) DF1000[2,4] * exp(DF1000[3,4] * x), geom="line", colour="blue", aes(linetype = "High"),size=.5) +
stat_function(fun=function(x) DF1000[5,4] * exp(DF1000[6,4] * x), geom="line", colour="blue", aes(linetype = "Low"),size=.5) +
theme(legend.justification = c(1, 1), legend.position = c(1, 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
labs(x="Distance (in bases)",y=expression(r^2),linetype="Predation Level")  + theme(legend.text=element_text(size=20))
ARPlot
source('~/Computing/FurtherLD/Code/Thesis_Figure_Guppy.R')
source('~/Computing/FurtherLD/Code/Thesis_Figure_Guppy.R')
