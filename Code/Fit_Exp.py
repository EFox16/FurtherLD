#!/usr/bin/python

"""Fits an exponential decay function to a data set"""

___author__ = "Emma Fox (e.fox16@imperial.ac.uk)"
__version__ = "0.0.1"

########################################################################
# IMPORTS                                                              #
########################################################################
import sys
import os
import argparse
import glob
import numpy as np
from lmfit import minimize, Minimizer, Parameters, Parameter, report_fit, fit_report
import csv
import subprocess
import random
import linecache
import gzip


########################################################################
# TAGS FOR OPTIONS                                                     #
########################################################################
parser = argparse.ArgumentParser(description="Fit an exponential curve (with the option to generate plots of the data and curves) to files generated by ngsLD")
Required_Arguments=parser.add_argument_group("arguments required to run command")
Required_Arguments.add_argument("--input_list", type=str, 
					help="Specify the file with the list of file names to be analysed (ls *.ld > ld.FileList",
					default="stdout", required="True")
Required_Arguments.add_argument("--data_type", type=str, choices=['r2Pear','D',
					'DPrime','r2GLS'],
					help="Choose which measure of LD to use: r2Pear, D, DPrime, or r2GLS",
					default="stdout", required="True")
parser.add_argument("--rnd_sample", type=float,
					help="Use a fraction (greater than 0, less than 1) of the data to run the fitting analysis")
parser.add_argument("--output_prefix", type=str,
					help="Specify file name for output (optional)")
args = parser.parse_args()

# Print help if no arguments specified and quit run
if len(sys.argv) == 1:
    parser.print_help()
    sys.exit(1)

if args.rnd_sample:
	#Will exit the script if a number greater than 1 or less than 0 is used
	if 0 >= args.rnd_sample:
		parser.print_help()
		sys.exit(1)
	elif args.rnd_sample >= 1:
		parser.print_help()
		sys.exit(1)
	#Print a line describing the specified down-sampling
	elif 0 < args.rnd_sample < 1:
		print "Randomly subsample down to: {} * Total Number of Rows".format(args.rnd_sample)

# Give some output to describe options used
print "\nData type chosen: {}".format(args.data_type)
print "\nFiles to be Analysed:"
with open(args.input_list) as file:
    FileList = [line.strip() for line in file]
for i in FileList:
	print i

########################################################################
# FUNCTIONS                                                            #
########################################################################

def random_sample(input_name):
	"""Randomly subset a file to the specified proportional size"""
	#Count number of lines in original file
	with open(input_name) as f:
		old_size = len(f.readlines())
	#Determine number of lines for new file
	new_size=int(round(sum(1 for row in open(input_name))* args.rnd_sample))
	#Create name for sub-sampled file
	SampledFileName, SampledExten = os.path.splitext(input_name)
	SampledName = '%s_smpld%s' % (SampledFileName,SampledExten)
	#Randomly select the desired number of lines and print to new file
	with open(SampledName,"wb") as sink:
		for i in random.sample(range(0, old_size), new_size):
			sink.write(linecache.getline(input_name, i))
	linecache.clearcache()

def Make_Sampled_FileName(input_name):
	"""Makes a new file list of the randomly sub-sampled files"""
	SampledFileName, SampledExten = os.path.splitext(input_name)
	SampledName = '%s_smpld%s' % (SampledFileName,SampledExten)
	return SampledName

def Load_File(file_list_pos):
	"""Loads a single file and defines the x and y axis for the graph"""
	#Check size of input file
	file_info=os.stat(file_list_pos)
	if file_info.st_size >= 250000000:
		print "\n***WARNING: FILE SIZE EXCEEDS 250 MB***" 
		print "CONSIDER USING --rnd_sample TO SPEED UP PROCESSING"
	
	if file_list_pos.endswith('.gz'):
		with gzip.open(file_list_pos, 'rb') as ldFile:
			BPDist,r2Pear,D,DPrime,r2GLS=np.loadtxt(ldFile, usecols=(2,3,4,5,6), unpack=True)
	else:
		with open(file_list_pos, 'rb') as ldFile:
			BPDist,r2Pear,D,DPrime,r2GLS=np.loadtxt(ldFile, usecols=(2,3,4,5,6), unpack=True)
		
	#Sets the x to the distance between pairs and the response data to the r^2 value (can also change data to D, DPrime, and r2GLS)
	x=BPDist
	
	#Choose data type matching specified option
	if args.data_type == 'r2Pear':
		data=r2Pear
	elif args.data_type == 'D':
		data=D
	elif args.data_type == 'DPrime':
		data=DPrime
	elif args.data_type == 'r2GLS':
		data=r2GLS
	Axis_Data=[x,data]
	return Axis_Data
	
def GUESS(paramsGUESS, x, data):
	"""Linear function"""
	a = paramsGUESS['a']
	b = paramsGUESS['b']
	model = a + b*x
	return model - data
	
def EXP(paramsEXP, x, data):
	"""Models exponential decay"""
	init = paramsEXP['init']
	lam = paramsEXP['lam']
	model = init * np.exp(lam * x)
	return model - data

########################################################################
# LOAD DATA AND FIT                                                    #
########################################################################
#Create name for result file
if args.output_prefix:
	ResultName='%s.csv' % (args.output_prefix)
else:
	FileName, Exten = os.path.splitext(os.path.basename(args.input_list))
	if args.rnd_sample:
		ResultName = '%s_%s.FitParams.smpld.csv' % (FileName, args.data_type)
	else:
		ResultName = '%s_%s.FitParams.csv' % (FileName, args.data_type)
	
#If --rnd_sampled used, create new files and make list
if args.rnd_sample:
	BaseFileList=FileList
	FileList=[]
	for i in range(0,len(BaseFileList)):
		random_sample(BaseFileList[i])
		FileList.append(Make_Sampled_FileName(BaseFileList[i]))
		

with open(ResultName, 'wb') as csvfile:
	ResultFile = csv.writer(csvfile, delimiter=',', quotechar='|')
	#Puts headings on the csv file
	ResultFile.writerow(["Data_Set", "Data Type", "Parameter", "Value"])
	
	#Run fitting on each file
	for i in range(0,len(FileList)):
		#Load file
		print "\nLoading data from {}".format(FileList[i])
		Axis_Data=Load_File(FileList[i])
		
		#Get the data returned from load data function
		x=Axis_Data[0]
		data=Axis_Data[1]
		
		#Create list of parameters for linear function
		paramsGUESS = Parameters()
		paramsGUESS.add('a', value=1)
		paramsGUESS.add('b', value=-1)
		
		#Run linear fitting function
		ResultGUESS=minimize(GUESS, paramsGUESS, args=(x,), kws={'data':data})
		
		#Create parameters for exponential decay curve function using guessed value from linear function
		paramsEXP = Parameters()
		paramsEXP.add('init', value=1)
		paramsEXP.add('lam', value=ResultGUESS.params.valuesdict()["b"])
		
		#Run exponential decay fitting curve function
		print "Fitting exponential decay curve function to data..."
		ResultEXP=minimize(EXP, paramsEXP, args=(x,), kws={'data':data})
		
		#Write rows to the file	
		print "Writing results to {}...".format(ResultName)
		ResultFile.writerow([os.path.basename(FileList[i]), args.data_type, "AIC", ResultEXP.aic])
		ResultFile.writerow([os.path.basename(FileList[i]), args.data_type, "init", ResultEXP.params.valuesdict()['init']])
		ResultFile.writerow([os.path.basename(FileList[i]), args.data_type, "lam", ResultEXP.params.valuesdict()['lam']])
